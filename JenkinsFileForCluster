pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-creds')
        IMAGE_NAME = "rox1999/star-agile-health-care"
        TEST_SERVER = "65.0.103.46"
        PROD_SERVER = "13.232.23.217"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git url: 'https://github.com/Rox1999/star-agile-health-care.git', branch: 'master'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $IMAGE_NAME:latest .'
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withDockerRegistry([credentialsId: "$DOCKERHUB_CREDENTIALS", url: ""]) {
                    sh 'docker push $IMAGE_NAME:latest'
                }
            }
        }

        stage('Deploy to Test Server') {
            steps {
                sshagent(['jenkins-ssh-key']) {
                    sh """
                    ssh root@$TEST_SERVER 'kubectl delete deployment healthcare-app --ignore-not-found=true && kubectl delete service healthcare-service --ignore-not-found=true'
                    ssh root@$TEST_SERVER 'cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: healthcare-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: healthcare
  template:
    metadata:
      labels:
        app: healthcare
    spec:
      containers:
        - name: healthcare
          image: $IMAGE_NAME:latest
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: healthcare-service
spec:
  selector:
    app: healthcare
  type: NodePort
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 30080
EOF'
                    """
                }
            }
        }

        stage('Health Check on Test Server') {
            steps {
                script {
                    def health = sh(script: "ssh root@$TEST_SERVER 'curl -s http://localhost:30080/actuator/health'", returnStdout: true).trim()
                    if (!health.contains("UP")) {
                        error("Health check failed on Test server.")
                    }
                }
            }
        }

        stage('Deploy to Prod Server') {
            steps {
                sshagent(['jenkins-ssh-key']) {
                    sh """
                    ssh root@$PROD_SERVER 'kubectl delete deployment healthcare-app --ignore-not-found=true && kubectl delete service healthcare-service --ignore-not-found=true'
                    ssh root@$PROD_SERVER 'cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: healthcare-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: healthcare
  template:
    metadata:
      labels:
        app: healthcare
    spec:
      containers:
        - name: healthcare
          image: $IMAGE_NAME:latest
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: healthcare-service
spec:
  selector:
    app: healthcare
  type: NodePort
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 30080
EOF'
                    """
                }
            }
        }
    }
}
